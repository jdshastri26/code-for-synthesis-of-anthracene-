1. Install libraries. 
pip install torch torchvision torch-geometric rdkit pandas scikit-learn


2.Prepare Data

import torch
from torch_geometric.data import Data, DataLoader
from rdkit import Chem
from rdkit.Chem import AllChem
import pandas as pd
from torch_geometric.utils import from_smiles

# Example dataset: Replace with your actual dataset
data = {
    'reactant_smiles': [
        'CC(=O)Oc1ccccc1C(=O)O',  # Aspirin
        'CCO',                     # Ethanol
        'c1ccccc1'                 # Benzene
    ],
    'product_smiles': ['c1ccc2c(c1)ccc3c2cccc3']  # Anthracene
}

# Convert SMILES to graphs
def smiles_to_data(smiles):
    mol = Chem.MolFromSmiles(smiles)
    mol = Chem.AddHs(mol)
    AllChem.EmbedMolecule(mol)
    graph = from_smiles(smiles)
    return graph

reactant_graphs = [smiles_to_data(smiles) for smiles in data['reactant_smiles']]
product_graph = smiles_to_data(data['product_smiles'][0])

# Create DataLoader
batch_size = 1
train_loader = DataLoader(reactant_graphs, batch_size=batch_size, shuffle=True)


3. Define the GNN mdoel 

import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.nn import GCNConv

class GNNModel(nn.Module):
    def __init__(self, hidden_channels):
        super(GNNModel, self).__init__()
        torch.manual_seed(42)
        self.conv1 = GCNConv(1, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.fc1 = nn.Linear(hidden_channels, hidden_channels)
        self.fc2 = nn.Linear(hidden_channels, 1)  # Assuming binary classification

    def forward(self, x, edge_index):
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        x = F.relu(x)
        x = torch.mean(x, dim=0)  # Global pooling
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        return x

# Instantiate the model, define the optimizer and loss function
model = GNNModel(hidden_channels=64)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
criterion = nn.MSELoss()

4. Train the model 

def train():
    model.train()
    for data in train_loader:
        optimizer.zero_grad()
        output = model(data.x, data.edge_index)
        loss = criterion(output, torch.tensor([1.0]))  # Assuming target is always 1 for simplicity
        loss.backward()
        optimizer.step()

num_epochs = 50
for epoch in range(num_epochs):
    train()
    print(f'Epoch {epoch+1}, Loss: {loss.item():.4f}')

5. Test the model 

def test():
    model.eval()
    correct = 0
    for data in test_loader:
        with torch.no_grad():
            output = model(data.x, data.edge_index)
        pred = output > 0.5
        correct += int(pred.item() == 1)  # Assuming binary classification
    return correct / len(test_loader)

# Create a test DataLoader if you have test data
# test_loader = DataLoader(test_graphs, batch_size=batch_size, shuffle=False)

# Evaluate the model
# accuracy = test()
# print(f'Accuracy: {accuracy:.4f}')







